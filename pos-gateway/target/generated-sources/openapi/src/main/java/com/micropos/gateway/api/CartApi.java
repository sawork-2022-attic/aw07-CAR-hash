/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micropos.gateway.api;

import com.micropos.gateway.dto.ErrorDto;
import com.micropos.gateway.dto.ItemDto;
import com.micropos.gateway.dto.ItemFieldsDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-05-22T23:13:30.901727+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "cart", description = "the cart API")
public interface CartApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /cart/add : Add item to cart
     *
     * @param itemFieldsDto add item to cart (required)
     * @return Add succeed (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "addItem",
        summary = "Add item to cart",
        responses = {
            @ApiResponse(responseCode = "200", description = "Add succeed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ItemDto.class))),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cart/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ItemDto>> addItem(
        @Parameter(name = "ItemFieldsDto", description = "add item to cart", required = true, schema = @Schema(description = "")) @Valid @RequestBody ItemFieldsDto itemFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 0, \"productId\" : \"productId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /cart/del : Del the existence or decrease the quantity of certain item in the cart
     *
     * @param itemFieldsDto del item in cart (required)
     * @return Del succeed (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "delItem",
        summary = "Del the existence or decrease the quantity of certain item in the cart",
        responses = {
            @ApiResponse(responseCode = "200", description = "Del succeed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ItemDto.class))),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorDto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cart/del",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ItemDto>> delItem(
        @Parameter(name = "ItemFieldsDto", description = "del item in cart", required = true, schema = @Schema(description = "")) @Valid @RequestBody ItemFieldsDto itemFieldsDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quantity\" : 0, \"productId\" : \"productId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
